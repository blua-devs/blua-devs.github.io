{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"What is bLua?","text":"<p>bLua is a plugin for Unity that allows C# code to easily interact with native Lua 5.4 and vice versa. That means running blazing fast Lua code with just two lines of code.</p> <pre><code>bLuaInstance instance = new bLuaInstance();\ninstance.DoString(\"print('Hello world!')\");\n</code></pre> <p></p>"},{"location":"#what-makes-blua-special","title":"What makes bLua special?","text":"<p>bLua is lightweight and runs Lua code using native Lua 5.4, so your Lua code will run anywhere from 100 to 10,000 times faster than with plugins like Moonsharp and XLua! Try our benchmarks yourself in the bLua example Unity project.</p> <p>bLua was made with Unity development in mind, so there are no extra steps for getting Lua integrated into your Unity project. Simply clone the bLua repository into your <code>/Assets/Plugins/bLua</code> folder.</p> <p>bLua also runs on the latest version of Lua (Lua 5.4), which is faster and has more features than older versions of Lua.</p> <p></p> <p></p> <p>bLua is an open-source project being developed by Lua lovers. Contributors are listed on the website as a thanks for their work.</p> <p>If you have interest in contributing to the project, join our Discord server and inquire about becoming a contributor. Wanna help in other ways?</p> <ul> <li>Encourage others to check us out!</li> <li>Drop a star on our GitHub repository!</li> <li>Point out bugs and make feature requests in our Discord!</li> </ul> <p>  Tyster actively maintains and updates bLua. </p> <p>  Denivarius and the team at DMHub created the original native Lua interop that became bLua. </p> <p> World to Build uses bLua to power Lua scripts in over 2,500 user-created World to Build games. </p>"},{"location":"blog/","title":"Patch Notes","text":""},{"location":"blog/2023/03/18/initial-release/","title":"Initial Release","text":"<p>I've gone through and filled out the website with basic content and have officially dubbed the project as released! If you're eager to get your hands dirty and try it out, you're encouraged to do so. Don't hesitate to mention feature requests, bug reports, or requests for help.</p> <p>In other news, this is a great time for people who have shown interest in contributing to help out. If you or someone you know is versed in C# and Lua's C API, definitely reach out inquiring about contributing. We have an organized board of small and large feature requests and bugs that we call \"bounties\" that can easily be grabbed and worked on by individuals. A section on the website's landing page is dedicated to folks who contribute to the plugin.</p>"},{"location":"blog/2023/08/15/patch-1/","title":"Patch 1","text":"<ul> <li>C# Garbage Collection</li> <li>Improved logging</li> <li>Array/List/Dictionary support</li> <li>Params support</li> </ul> <p>Array, List&lt;&gt;, and Dictionary&lt;&gt;</p> <p>I just realized a few days ago that there was no support for C# functions that use types like Array, List&lt;&gt;, or Dictionary&lt;&gt; to be converted to and from Lua. That has now been added.</p> <p>CSharp Garbage Collection</p> <p>A very useful feature we were missing has just been added: C#-Managed Lua Garbage Collection! There are a few cases where userdata objects that are passed to userdata functions are never actually marked dead for Lua's internal garbage collection. Now the stragglers are collected and marked for Lua's GC every 10s or so. I might revisit this feature to add more control to when garbage collection happens, maybe even something more akin to Lua's built in GC.</p> <p>All of these changes were merged into the main repository in commit <code>136d00925ce076d968653d30b72d5a3ee837ebe7</code></p>"},{"location":"blog/2025/07/12/patch-2/","title":"Patch 2","text":"<ul> <li>Moved coroutine scheduler to C#</li> <li>Added support for async C# functions being called (and yielded) from Lua coroutines</li> <li>Added variable arg support for print and spawn helper funcs</li> <li>Massive cleanup pass</li> </ul> <p>Coroutines were being handled in a strange way mostly being managed by Lua code, which was causing some features to be difficult (namely async C# functions being called/yielded from Lua). Lua's C API doesn't allow you to mix and match whether C code or Lua is resuming and yielding coroutines, so it's either all Lua managed or all C# managed - bLua is now all C# managed!</p> <p>With the change to our management of coroutines, I was able to add support for async C# functions being called (and yielded) from Lua. Example of C# and Lua code working together seamlessly:</p> <pre><code>static Task&lt;string&gt; WaitDuration(float duration)\n{\n    Task.Delay(1000); // 1000ms = 1s\n    return \"Hello world!\";\n}\n\nfunction testCoroutine(duration)\n    local str = WaitDuration(duration)\n    print(str) // After 1 second, will print \"Hello world!\"\nend\nlocal co = coroutine.create(testCoroutine)\ncoroutine.resume(co)\n</code></pre> <p>Added variable args support for print and spawn, previously they were capped at 8 parameters.</p> <p>A massive cleanup pass also took place, which mostly consolidated similar code, removed unused code, and renamed commonly used developer-facing functions to better match the API of similar plugins and Unity standards. Some notable ones:</p> <ul> <li>(bLuaInstance) .ExecBuffer(...) -&gt; .LoadString(...)</li> <li>(bLuaValue) .CastToBool(...)/.Bool -&gt; .ToBool() (this goes for similarly named functions too)</li> <li>(Lua) spawn(...)/wait(...) -&gt; thread.spawn(...)/thread.wait(...)</li> </ul> <p>All of these changes were merged into the main repository in commit <code>d5f206c37203261b9dcb716f75cad7f0697db31a</code></p>"},{"location":"getting-started/csharp-calling-lua/","title":"C# Calling Lua","text":"<p>To access Lua from C#, we first need to define some Lua functions in code and run that code on our instance.</p> <pre><code>instance.DoString(@\"\nfunction healCharacter(character)\n    local healthBefore = character.health\n    character.health = 100\n    print('Healed character from ', healthBefore, ' to ', character.health)\nend\n\");\n</code></pre> <p>Now we need to get a reference to our <code>healCharacter</code> function in C#.</p> <pre><code>bLuaValue healFunction = instance.GetGlobal(\"healCharacter\");\n</code></pre> <p>Let's do some safety checks to make sure the function is valid, and then call it with a <code>Character</code> passed as a parameter.</p> <pre><code>if (healFunction != null &amp;&amp; healFunction.Type == DataType.Function)\n{\n    Character newCharacter = new Character();\n    newCharacter.Damage(50);\n    instance.Call(healFunction, newCharacter);\n}\n</code></pre>"},{"location":"getting-started/lua-calling-csharp/","title":"Lua Calling C#","text":"<p>To access C# userdata from Lua, you will need to create a class that has the bLuaUserData attribute. By default, instances will register all classes with this attribute when they initialize.</p> <pre><code>[bLuaUserData] // The bLua userdata attribute\npublic class Character\n{\n    public int health = 100;\n\n    public void Damage(int damage)\n    {\n        health -= damage;\n    }\n}\n\n[bLuaUserData]\npublic class CharacterFunctionLibrary\n{\n    public static Character CreateCharacter()\n    {\n        return new Character();\n    }\n}\n</code></pre> <p>Next, we can add an instance of this <code>Character</code> class to our Lua environment as a global variable. We can also add an instance of our <code>CharacterFunctionLibrary</code>.</p> <pre><code>instance.SetGlobal(\"character\", new Character());\ninstance.SetGlobal(\"CharacterFunctionLibrary\", new CharacterFunctionLibrary());\n</code></pre> <p>In our Lua code, we can access these userdata objects from anywhere since they are global.</p> <pre><code>instance.DoString(@\"\n    character.Damage(10)\n    print(character.health)\n\n    local newCharacter = CharacterFunctionLibrary.CreateCharacter()\n    newCharacter.Damage(20)\n    print(newCharacter.health)\n\");\n</code></pre>"},{"location":"getting-started/running-lua/","title":"Running Lua","text":"<p>To run Lua code with bLua, you will need to create a bLuaInstance. You can set up your instance with settings and rules to your liking through the settings property, or create an instance without any settings.</p> <pre><code>bLuaSettings settings = new bLuaSettings()\n{\n    features = bLuaSettings.SANDBOX_BASICMODDING,\n    tickBehaviour = bLuaSettings.TickBehaviour.AlwaysTick\n};\n\n// Settings is an optional parameter\nbLuaInstance instance = new bLuaInstance(settings);\n</code></pre> <p>You only need one instance to run Lua code, it can be reused by multiple chunks of code as desired. You can run standard Lua code through the instance by passing it in as a string.</p> <pre><code>instance.DoString(@\"\n    local myInteger = 100\n    myInteger = 50\n    print(myInteger)\n\");\n</code></pre> <p>You will notice that the <code>print</code> function in Lua doesn't automatically send logs to Unity's editor log. You can hook this up yourself through an event on the instance.</p> <pre><code>instance.OnPrint.AddListener(LuaPrint);\n\nvoid LuaPrint(bLuaValue[] parameters)\n{\n    string log = \"\";\n    foreach (bLuaValue parameter in parameters)\n    {\n        log += parameter.ToString();\n    }\n    Debug.Log(log); // Log the print to Unity's log\n}\n</code></pre>"},{"location":"getting-started/unity-setup/","title":"Unity Setup","text":"<p>bLua was built with Unity usage in mind, so setting up your Unity project with bLua is straightforward.</p> <ol> <li>Download the contents of the bLua repository.</li> <li>Create a folder in your Unity project under <code>/Assets/Plugins/bLua</code>.</li> <li>Put the files you downloaded into this new folder.</li> </ol> <p>That's it! Continue to the next section to start running Lua code, or review possible issues and their solutions below.</p> <p></p>"},{"location":"getting-started/unity-setup/#possible-issues","title":"Possible Issues","text":""},{"location":"getting-started/unity-setup/#error-cs0227-unsafe-code-may-only-appear-in-compiling-with-unsafe","title":"error CS0227: Unsafe code may only appear in compiling with /unsafe.","text":"<p>bLua uses unsafe code for some features. You can enable \"Allow 'unsafe' code\" in Unity's Player Settings to fix this error.</p> <p></p>"},{"location":"getting-started/unity-setup/#troubleshooting","title":"Troubleshooting","text":"<p>If you're having trouble setting up bLua in your Unity project, feel free to ask for further assistance in the bLua Discord server.</p>"},{"location":"reference/instance/","title":"bLuaInstance","text":"<p>Coming soon</p>"},{"location":"reference/userdata/","title":"bLuaUserData","text":"<p>Coming soon</p>"},{"location":"reference/value/","title":"bLuaValue","text":"<p>Coming soon</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2023/","title":"2023","text":""}]}